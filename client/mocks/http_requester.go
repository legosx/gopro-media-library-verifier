// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/legosx/gopro-media-library-verifier/client (interfaces: HTTPRequester)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/http_requester.go -package=mocks github.com/legosx/gopro-media-library-verifier/client HTTPRequester
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPRequester is a mock of HTTPRequester interface.
type MockHTTPRequester struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRequesterMockRecorder
}

// MockHTTPRequesterMockRecorder is the mock recorder for MockHTTPRequester.
type MockHTTPRequesterMockRecorder struct {
	mock *MockHTTPRequester
}

// NewMockHTTPRequester creates a new mock instance.
func NewMockHTTPRequester(ctrl *gomock.Controller) *MockHTTPRequester {
	mock := &MockHTTPRequester{ctrl: ctrl}
	mock.recorder = &MockHTTPRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRequester) EXPECT() *MockHTTPRequesterMockRecorder {
	return m.recorder
}

// NewRequest mocks base method.
func (m *MockHTTPRequester) NewRequest(arg0, arg1 string, arg2 io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockHTTPRequesterMockRecorder) NewRequest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockHTTPRequester)(nil).NewRequest), arg0, arg1, arg2)
}
