// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/legosx/gopro-media-library-verifier/dirscan (interfaces: OSFile)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/osfile.go -package=mocks github.com/legosx/gopro-media-library-verifier/dirscan OSFile
//

// Package mocks is a generated GoMock package.
package mocks

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOSFile is a mock of OSFile interface.
type MockOSFile struct {
	ctrl     *gomock.Controller
	recorder *MockOSFileMockRecorder
}

// MockOSFileMockRecorder is the mock recorder for MockOSFile.
type MockOSFileMockRecorder struct {
	mock *MockOSFile
}

// NewMockOSFile creates a new mock instance.
func NewMockOSFile(ctrl *gomock.Controller) *MockOSFile {
	mock := &MockOSFile{ctrl: ctrl}
	mock.recorder = &MockOSFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSFile) EXPECT() *MockOSFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOSFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOSFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOSFile)(nil).Close))
}

// Readdir mocks base method.
func (m *MockOSFile) Readdir(arg0 int) ([]fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readdir", arg0)
	ret0, _ := ret[0].([]fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readdir indicates an expected call of Readdir.
func (mr *MockOSFileMockRecorder) Readdir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readdir", reflect.TypeOf((*MockOSFile)(nil).Readdir), arg0)
}
